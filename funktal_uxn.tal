|0000
( state constants )
%Base { #00 }
%Identifier { #05 }
%TypeIdentifier { #06 }
%Constant { #07 }
%TypeSeparator { #08 }
%Assignment { #09 }
%Operator { #0a }
%ParenOpen { #0b }
%ParenClose { #0c }
%BindOpen { #0d }
%BindClose { #0e }
%AltSeparator { #0f }
%NumConst { #10 }
%CharConst { #11 }
%EndCharConst { #12 }
%StringConst { #13 }
%EndStringConst { #14 }
%Separator { #15 }
%TypeDeclarator { #16 }
%BlockOpen { #17 }
%BlockClose { #18 }
%TypeParenOpen { #19 }
%TypeParenClose { #1a }
%BracketOpen { #1a }
%BracketClose { #1b }
%Minus { #1c }
%Operator2 { #1d }
%Error { #1e }
%Skip { #1f }
%Comment { #20 }
%ExprSeparator { #21 }
%Comma { #22 }
%Quote { #23 }
%LeftPointy { #24 }

( context )
%None { #00 }
%Libraries { #0 }
%Uxntal { #02 }
%Aliases { #03 }
%Types { #04 }
%Constants { #05 }
%ProgramState { #06 }
%Devices { #07 }
%Functions { #08 }
%Main { #09 }

@state $1 @c $1
@nextState $1
@context $1 @prevContext $1
@funktalIdentifier $16

|0100
( this is the main program. Here is where you call the function )
BRK


@isTypeIdentifierStartChar
    .c LDZ #40 GTH
    .c LDZ #5b LTH
    AND
JMP2r

@isIdentifierStartChar
    .c LDZ #60 GTH
    .c LDZ #7b LTH
    AND
    .c LDZ #5f EQU
    ORA
JMP2r

@isDigit
    .c LDZ #2f GTH
    .c LDZ #3a LTH
    AND
JMP2r

@isOperator
    .c LDZ #29 GTH
    .c LDZ #30 LTH
    AND
    .c LDZ #21 EQU
    .c LDZ #25 EQU
    ORA ORA         ( (ic >= 42 .and. ic <= 47) .or. ic == 33 .or. ic == 37 )
    .c LDZ #26 EQU
    .c LDZ #3c EQU
    ORA
    .c LDZ #3d EQU
    .c LDZ #3e EQU
    ORA ORA         ( ic == 38 .or. ic == 60 .or. ic == 61 .or. ic == 62 )
    .c LDZ #5e EQU
    .c LDZ #7c EQU
    ORA
    .c LDZ #7e EQU
    ORA ( ic == 94 .or. ic == 124 .or. ic == 126 )
    ORA ORA
JMP2r

@isExprSeparator
    .c LDZ #0a EQU
    .c LDZ LIT "; EQU
    ORA
JMP2r

@updateContext
    .context LDZ None EQU
    ,&context_None JCN
JMP2r  

    &context_None
        .state LDZ BlockOpen EQU
        ,&state_BlockOpen JCN

        .state LDZ BlockClose EQU
        ,&state_BlockClose JCN
    JMP2r

    &state_BlockOpen
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "l EQU
        ,&Libraries JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "u EQU
        ,&Uxntal JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "t EQU
        ,&Types JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "a EQU
        ,&Aliases JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "c EQU
        ,&Constants JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "s EQU
        ,&ProgramState JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "d EQU
        ,&Devices JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "f EQU
        ,&Functions JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "m EQU
        ,&Main JCN

        .context LDZ .prevContext STZ
        ( funktalIdentifier = achar(0) )
    JMP2r
    
    &state_BlockClose
        None .context STZ

    &Libraries
        Libraries .context STZ
    JMP2r

    &Uxntal
        Uxntal .context STZ
    JMP2r

    &Types
        Types .context STZ
    JMP2r

    &Aliases
        Aliases .context STZ
    JMP2r

    &Constants
        Constants .context STZ
    JMP2r

    &ProgramState
        ProgramState .context STZ
    JMP2r

    &Devices
        Devices .context STZ
    JMP2r

    &Functions
        Functions .context STZ
    JMP2r

    &Main
        Main .context STZ
    JMP2r



@updateState
    .c STZ ( take char from the stack and put it in c )
    .state LDZ StringConst EQU 
    .c LDZ #22 EQU ( " has an ASCII code value of 34 )
    AND
    ,&EndString JCN

    .state LDZ StringConst EQU
    .c LDZ #22 NEQ
    AND
    ,&String JCN
    JMP2r

    .c STZ ( take char from the stack and put it in c )
    .state LDZ CharConst EQU 
    .c LDZ #27 EQU ( " has an ASCII code value of 34 )
    AND
    ,&EndChar JCN

    .state LDZ CharConst EQU
    .c LDZ #27 NEQ
    AND
    ,&Char JCN
    JMP2r

    .state LDZ Comment EQU
    .c LDZ #0a EQU
    AND
    ,&Base JCN
    JMP2r

    .state LDZ StringConst NEQ
    .state LDZ CharConst NEQ
    AND
    .state LDZ Comment NEQ
    AND
    ,&second_jump JCN ( state /= StringConst .and. state /= CharConst .and. state /= Comment )

    ,&nextState_state JMP ( else nextState = state )
    JMP2r

    &EndString
        EndStringConst .nextState STZ
    JMP2r

    &String
        StringConst .nextState STZ
    JMP2r

    &EndChar
        EndCharConst .nextState STZ
    JMP2r

    &Char
        CharConst .nextState STZ
    JMP2r

    &Base
        Base .nextState STZ
    JMP2r

    &second_jump
        .c LDZ #22 EQU ( " has an ASCII code value of 34 )
        ,&String JCN
        JMP2r
        .c LDZ #27 EQU
        ,&Char JCN
        JMP2r

        .state LDZ Minus EQU
        .c LDZ LIT "- EQU
        AND
        ,&Comment JCN
        JMP2r

        .state LDZ Comment EQU
        .c LDZ #0a EQU
        AND
        ,&Base JCN
        JMP2r

        .c LDZ LIT "{ EQU 
        ,&BlockOpen JCN
        JMP2r
        .c LDZ LIT "} EQU 
        ,&BlockClose JCN
        JMP2r

        .c LDZ LIT "( EQU 
        ,&ParenOpen JCN
        JMP2r
        .c LDZ LIT ") EQU 
        ,&ParenClose JCN
        JMP2r

        .c LDZ LIT "[ EQU 
        ,&BracketOpen JCN
        JMP2r
        .c LDZ LIT "] EQU 
        ,&BracketClose JCN
        JMP2r

        .c LDZ LIT "\ EQU 
        ,&BindOpen JCN
        JMP2r

        .c LDZ LIT "= EQU 
        ,&Operator2_Assignment JCN
        JMP2r

        .c LDZ LIT "` EQU 
        ,&Quote JCN
        JMP2r

         
        ,&isIdentifierState JSR2
        ,&isEndConstState JSR2
        ORA
        .state LDZ BlockOpen EQU
        .state LDZ BracketOpen EQU
        ORA
        .state LDZ ParenOpen EQU
        ORA ORA
        .c LDZ LIT "  EQU
        .c LDZ #09 EQU
        ORA
        AND
        ,&Separator JCN
        JMP2r


        .c LDZ LIT ", EQU 
        ,&Comma JCN
        JMP2r

        .c LDZ LIT ": EQU 
        ,&TypeDeclarator JCN
        JMP2r

        .c LDZ LIT "| EQU 
        ,&AltSeparator JCN
        JMP2r

        .state LDZ NumConst NEQ
        .c LDZ LIT ". EQU
        AND
        ,&BindClose JCN
        JMP2r

        .state LDZ NumConst EQU
        .c LDZ LIT "_ EQU
        AND
        ,&NumConst JCN
        JMP2r

        ,&isIdentifierState JSR2
        EOR
        ;isIdentifierStartChar JSR2
        AND
        ,&Identifier JCN
        JMP2r 

        ,&isIdentifierState JSR2
        EOR
        ;isTypeIdentifierStartChar JSR2
        AND
        ,&TypeIdentifier JCN
        JMP2r

        ,&isIdentifierState JSR2
        EOR
        ,&isStringConstState JSR2
        ORA
        ,&TypeIdentifier JCN
        JMP2r

        ,&isIdentifierState JSR2
        ,&isStringConstState JSR2
        ORA EOR
        ,&isdigit JSR2
        AND
        ,&NumConst JCN
        JMP2r

        .state LDZ LeftPointy EQU
        .c LDZ LIT "- EQU
        AND
        ,&TypeSeparator JCN
        JMP2r

        .state LDZ Minus NEQ
        .c LDZ LIT "- EQU
        AND
        ,&Minus JCN
        JMP2r

        .c LDZ LIT "  EQU
        .c LDZ #09 EQU
        ORA
        .state LDZ Minus EQU
        AND
        ,&Operator2 JCN
        JMP2r

        .state LDZ Operator NEQ
        .state LDZ Operator2 NEQ
        AND
        .state LDZ LeftPointy NEQ
        .c LDZ LIT "< EQU
        AND AND
        ,&LeftPointy JCN
        JMP2r

        .state LDZ Operator NEQ
        .state LDZ Operator2 NEQ
        AND
        .state LDZ LeftPointy NEQ
        ;isOperator JSR2
        AND AND
        ,&Operator JCN
        JMP2r

        .state LDZ Operator EQU
        .state LDZ LeftPointy EQU
        ORA
        .state LDZ Assignment EQU
        ORA
        ;isOperator JSR2
        AND
        ,&TypeSeparator_Operator2 JCN
        JMP2r


        .state LDZ Operator2 EQU
        ,&Base JCN
        JMP2r

        .state LDZ Operator EQU
        .state LDZ LeftPointy EQU
        ORA
        ;isOperator JSR2
        EOR AND
        ,&Base JCN
        JMP2r

        .state LDZ ExprSeparator NEQ
        ;isExprSeparator JSR2
        AND
        ,&ExprSeparator JCN
        JMP2r

        .c LDZ LIT "  EQU
        .c LDZ #09 EQU
        ORA
        ;isExprSeparator JSR2
        ORA
        .state LDZ ExprSeparator EQU
        AND
        ,&Separator JCN
        ,&nextState_state JMP ( else nextState = state )
        JMP2r



    
    &Comment
        Comment .nextState STZ
    JMP2r

    &BlockOpen
        BlockOpen .nextState STZ
    JMP2r

    &BlockClose
        BlockClose .nextState STZ
    JMP2r

    &ParenOpen
        ParenOpen .nextState STZ
    JMP2r

    &ParenClose
        ParenClose .nextState STZ
    JMP2r

    &BracketOpen
        BracketOpen .nextState STZ
    JMP2r

    &BracketClose
        BracketClose .nextState STZ
    JMP2r

    &BindOpen
        BindOpen .nextState STZ
    JMP2r

    &Operator2_Assignment
        .state LDZ Operator EQU
        .state LDZ LeftPointy EQU
        ORA
        .state LDZ Assignment EQU
        ORA
        ,&Operator2 JCN
        ,&Assignment JMP
    JMP2r

    &TypeSeparator_Operator2
        .state LDZ LeftPointy EQU
        .c LDZ LIT "- EQU
        AND
        ,&TypeSeparator JCN
        ,&Operator2 JMP
    JMP2r

    &isIdentifierState
        .state LDZ Identifier EQU
        .state LDZ TypeIdentifier EQU
        ORA
    JMP2r

    &isEndConstState
        .state LDZ EndCharConst EQU
        .state LDZ EndStringConst EQU
        ORA
        .state LDZ NumConst EQU
        ORA
    JMP2r

    &isStringConstState
        .state LDZ CharConst EQU
        .state LDZ CharConst EQU
        ORA
        
    JMP2r

    &nextState_state
        .state LDZ .nextState STZ
    JMP2r

    &Operator2
        Operator2 .nextState STZ
    JMP2r

    &Assignment
        Assignment .nextState STZ
    JMP2r

    &Quote
        Quote .nextState STZ
    JMP2r

    &Comma
        Comma .nextState STZ
    JMP2r

    &Separator
        Separator .nextState STZ
    JMP2r

    &TypeDeclarator
        TypeDeclarator .nextState STZ
    JMP2r

    &AltSeparator
        AltSeparator .nextState STZ
    JMP2r

    &BindClose
        BindClose .nextState STZ
    JMP2r

    &NumConst
        NumConst .nextState STZ
    JMP2r

    &Identifier
        Identifier .nextState STZ
    JMP2r

    &Minus
        Minus .nextState STZ
    JMP2r

    &LeftPointy
        LeftPointy .nextState STZ
    JMP2r

    &Operator
        Operator .nextState STZ
    JMP2r

    &TypeSeparator
        TypeSeparator .nextState STZ
    JMP2r

    &ExprSeparator
        ExprSeparator .nextState STZ
    JMP2r

    &TypeIdentifier
        TypeIdentifier .nextState STZ
    JMP2r

JMP2r




    



    




