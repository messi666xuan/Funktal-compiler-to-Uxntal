( date:2023-8-15    
call clearFunktalTokens() completed
call initFunktalIdentifierStrings() completed
call initFunktalFunctionIdentifierStrings() completed
call initFunktalTypeIdentifierStrings() completed
FunktalTokeniserFSM completed
FunktalTokeniser nearly line 185 completed : 
elseif (state == Operator2 .and. (prevState == Operator .or. prevState == LeftPointy 
.or. prevState == Assignment .or. prevState == Minus)) 
)
( state constants )
%Base { #00 }
%Identifier { #05 }
%TypeIdentifier { #06 }
%Constant { #07 }
%TypeSeparator { #08 }
%Assignment { #09 }
%Operator { #0a }
%ParenOpen { #0b }
%ParenClose { #0c }
%BindOpen { #0d }
%BindClose { #0e }
%AltSeparator { #0f }
%NumConst { #10 }
%CharConst { #11 }
%EndCharConst { #12 }
%StringConst { #13 }
%EndStringConst { #14 }
%Separator { #15 }
%TypeDeclarator { #16 }
%BlockOpen { #17 }
%BlockClose { #18 }
%TypeParenOpen { #19 }
%TypeParenClose { #1a }
%BracketOpen { #1a }
%BracketClose { #1b }
%Minus { #1c }
%Operator2 { #1d }
%Error { #1e }
%Skip { #1f }
%Comment { #20 }
%ExprSeparator { #21 }
%Comma { #22 }
%Quote { #23 }
%LeftPointy { #24 }

( context )
%None { #00 }
%Libraries { #01 }
%Uxntal { #02 }
%Aliases { #03 }
%Types { #04 }
%Constants { #05 }
%ProgramState { #06 }
%Devices { #07 }
%Functions { #08 }
%Main { #09 }

( token labels )
%ContextLabel { #0001 }
%IdentifierLabel { #0002 }
%TypeIdentifierLabel { #0003 }
%EmbeddedConstantLabel { #0004 }
%ConstantLabel { #0005 }
%SeparatorLabel { #0006 }
%OperatorLabel { #0007 }
%TypeSynonymLabel { #0008 }
%ArgLabel { #0009 }
%FNameLabel { #000a }
%PatternLabel { #000b }
%EndBindLabel { #000c }
%NamedConstantLabel { #000d }
%StateVarLabel { #000e }
%DeviceLabel { #000f }

( Const labels ( 2 bits ) )
%CString { #01 }

|0000
|10 @Console &vector $2 &read $1 &pad $5 &write $1 &error $1
@state $1 @c $1 @prevc $1 
@nextState $1 @prevState $1
@context $1 @prevContext $1 @funktalToken $2 
@idId $2 @stringConstIdx $1 @numConstIdx $1 @charIdx $1
@constId $1 @taggedConstId $2 @numConstId $1 @inBlock $1
@strLen $1 @funktalIdentifier $10 @hasMain $1
  
@index $1 @label $2 @funktalTokensIdx $2
@res $1

|0100

( this is the main program. Here is where you call the function )
BRK



@isTypeIdentifierStartChar
    .c LDZ #40 GTH
    .c LDZ #5b LTH
    AND
JMP2r

@isIdentifierStartChar
    .c LDZ #60 GTH
    .c LDZ #7b LTH
    AND
    .c LDZ #5f EQU
    ORA
JMP2r

@isDigit
    .c LDZ #2f GTH
    .c LDZ #3a LTH
    AND
JMP2r

@isOperator
    .c LDZ #29 GTH
    .c LDZ #30 LTH
    AND
    .c LDZ #21 EQU
    .c LDZ #25 EQU
    ORA ORA         ( (ic >= 42 .and. ic <= 47) .or. ic == 33 .or. ic == 37 )
    .c LDZ #26 EQU
    .c LDZ #3c EQU
    ORA
    .c LDZ #3d EQU
    .c LDZ #3e EQU
    ORA ORA         ( ic == 38 .or. ic == 60 .or. ic == 61 .or. ic == 62 )
    .c LDZ #5e EQU
    .c LDZ #7c EQU
    ORA
    .c LDZ #7e EQU
    ORA ( ic == 94 .or. ic == 124 .or. ic == 126 )
    ORA ORA
JMP2r

@isSeparator
    .state LDZ ParenOpen EQU .state LDZ ParenClose EQU ORA .state LDZ BlockOpen EQU .state LDZ BlockClose EQU ORA ORA
    .state LDZ BracketOpen EQU .state LDZ BracketClose EQU ORA .state LDZ BindOpen EQU .state LDZ BindClose EQU ORA ORA
    ORA
    .state LDZ TypeSeparator EQU .state LDZ Separator EQU ORA .state LDZ TypeDeclarator EQU .state LDZ Assignment EQU ORA ORA
    .state LDZ AltSeparator EQU .state LDZ ExprSeparator EQU ORA .state LDZ Comma EQU .state LDZ Quote EQU ORA ORA
    ORA
    ORA
    .res STZ
JMP2r

@afterIdentifier
    .state LDZ Separator EQU .state LDZ TypeDeclarator EQU ORA .state LDZ Assignment EQU .state LDZ TypeSeparator EQU ORA ORA
    .state LDZ AltSeparator EQU .state LDZ ParenClose EQU ORA .state LDZ ExprSeparator EQU .state LDZ LeftPointy EQU ORA ORA
    ORA
    .state LDZ Operator EQU .state LDZ BracketClose EQU ORA .state LDZ BindClose EQU .state LDZ Comma EQU ORA ORA
    ORA
    ;isIdentifierprevState JSR2
    AND
JMP2r

@isIdentifierprevState
    .prevState LDZ Identifier EQU
    .prevState LDZ TypeIdentifier EQU
    ORA
    .prevState LDZ NumConst EQU
    .prevState LDZ Operator EQU
    ORA ORA
    .prevState LDZ Operator2 EQU
    ORA
JMP2r

@isExprSeparator
    .c LDZ #0a EQU
    .c LDZ LIT "; EQU
    ORA
JMP2r

@clearFunktalTokens               ( call clearFunktalTokens() )
    #0000 ;funktalTokens STA2
    #0001 .funktalTokensIdx STZ2
JMP2r

@charStr $10
@initFunktalIdentifierStrings    ( call initFunktalIdentifierStrings() )
    ;clearFunktalIdentifiers JSR2
    #01 ;funktalIdentifierStringIdxs ;funktalIdentifierStringId LDA2 ADD2 STA2 ( funktalIdentifierStringIdxs(funktalIdentifierStringId)=1 )
    LIT "- ;charStr STA
    ;addStringToFunktalFunctionIdentifierStrings JSR2
JMP2r

@funktalIdentifierStrings $800 @funktalIdentifierStringIdxs $300 @funktalIdentifierStringLengths $300
@funktalIdentifierStringId $2 @funktalIdentifierStringsIdx $2


@clearFunktalIdentifiers
    LIT "  ;funktalIdentifierStrings STA 
    #00 ;funktalIdentifierStringIdxs STA
    #00 ;funktalIdentifierStringLengths STA
    #01 ;funktalIdentifierStringId STA
    #01 ;funktalIdentifierStringsIdx STA
JMP2r

@funktalFunctionIdentifiers $200 @funktalFunctionIdentifiersIdx $1

@addStringToFunktalFunctionIdentifierStrings
    ;addStringToFunktalIdentifierStrings JSR2
    (funktalFunctionIdentifiers(funktalFunctionIdentifiersIdx) = makeFunktalToken(IdentifierLabel, funktalIdentifierStringId-1_2) )
    IdentifierLabel .label LDZ2 ;funktalIdentifierStringId #0001 SUB2 .idId LDZ2
    ;makeFunktalToken JSR2
    ;token LDA2
    ;funktalFunctionIdentifiers ;funktalFunctionIdentifiersIdx LDA2 ADD2 STA2
    ;funktalFunctionIdentifiersIdx LDA2 INC2 ;funktalFunctionIdentifiersIdx STA2

JMP2r
@addStringToFunktalIdentifierStrings
    ( call str2array(charStr,funktalIdentifierStringsIdx,funktalIdentifierStrings,strLen) )
    ;funktalIdentifierStringsIdx LDA ;funktalIdentifierStringId LDA ;funktalIdentifierStringIdxs ADD2 STA
    .strLen LDZ ;funktalIdentifierStringId LDA ;funktalIdentifierStringLengths ADD2 STA
    ;funktalIdentifierStringId LDA INC ;funktalIdentifierStringId STA
    .strLen LDZ ;funktalIdentifierStringsIdx LDA ADD2 ;funktalIdentifierStringsIdx STA

JMP2r

@initFunktalFunctionIdentifierStrings                  ( call initFunktalFunctionIdentifierStrings() )
    ;clearFunktalFunctionIdentifiers JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ;addStringToFunktalFunctionIdentifierStrings JSR2
    ( I don't know how to pass an array as a parameter into a function in uxntal )

JMP2r

@funktalFunctionTypes $1
@funktalFunctionDefinitionIdxs $1 @funktalFunctionDefinitionLengths $1 
@funktalFunctionDefinitionsIdx $1 @funktalFunctionId $1
@clearFunktalFunctionIdentifiers
    #00 ;funktalFunctionIdentifiers STA
    #00 ;funktalFunctionTypes STA
    #00 ;funktalFunctionDefinitionIdxs STA
    #00 ;funktalFunctionDefinitionLengths STA
    #01 ;funktalFunctionDefinitionsIdx STA
    #01 ;funktalFunctionIdentifiersIdx STA
    #01 ;funktalFunctionId STA
JMP2r

@initFunktalTypeIdentifierStrings
    ;clearFunktalTypeIdentifiers JSR2
    #01 ;funktalTypeIdentifierStringIdxs ;funktalTypeIdentifierStringId LDA ADD STA
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
    ;addStringToFunktalTypeIdentifierStrings JSR2
JMP2r

@funktalTypeIdentifierStringIdxs $100 @funktalTypeIdentifierStringLengths $100 @funktalTypeIdentifierStrings $800
@funktalTypeIdentifierStringId $1 @funktalTypeIdentifierStringsIdx $1
@clearFunktalTypeIdentifiers
    LIT "  ;funktalTypeIdentifierStrings STA
    #00 ;funktalTypeIdentifierStringIdxs STA
    #00 ;funktalTypeIdentifierStringLengths STA
    #01 ;funktalTypeIdentifierStringId STA
    #01 ;funktalTypeIdentifierStringsIdx STA 
JMP2r

@addStringToFunktalTypeIdentifierStrings
    ( call str2array(charStr,funktalTypeIdentifierStringsIdx,funktalTypeIdentifierStrings,strLen) )
    ;funktalTypeIdentifierStringsIdx LDA ;funktalTypeIdentifierStringId LDA ;funktalTypeIdentifierStringIdxs ADD2 STA
    .strLen LDZ ;funktalTypeIdentifierStringId LDA ;funktalTypeIdentifierStringLengths ADD2 STA
    ;funktalTypeIdentifierStringId LDA INC ;funktalTypeIdentifierStringId STA
    .strLen LDZ ;funktalTypeIdentifierStringsIdx LDA ADD2 ;funktalTypeIdentifierStringsIdx STA

@numConstant $8 @stringConstant $80 


@funktalIdentifier_achar0
    #00 .index STZ
    #10 ( counter=16 )
    #00 .funktalIdentifier STZ ( Set current byte to 0 )
    &loop
        #01 SUB  ( Decrement loop counter )
        .index LDZ INC .index STZ
        #00 .index LDZ .funktalIdentifier ADD2 STZ  ( Move to next byte in the array )
        DUP
        #00 NEQ ,&loop JCN ( If loop counter is not zero, jump back to &loop )
JMP2r  ( Return to the main program )

@numConstant_achar0
    #00 .index STZ
    #08 ( counter=8 )
    #00 ;numConstant STA ( Set current byte to 0 )
    &loop
        #01 SUB  ( Decrement loop counter )
        .index LDZ INC .index STZ
        #00 .index LDZ ;numConstant ADD2 STA  ( Move to next byte in the array )
        
        DUP
        #00 NEQ ,&loop JCN ( If loop counter is not zero, jump back to &loop )

JMP2r  ( Return to the main program )

@stringConstant_achar0
    #00 .index STZ
    #80 ( counter=128 )
    #00 ;stringConstant STA ( Set current byte to 0 )
    &loop
        #01 SUB  ( Decrement loop counter )
        .index LDZ INC .index STZ
        #00 .index LDZ ;stringConstant ADD2 STA  ( Move to next byte in the array )
        
        DUP
        #00 NEQ ,&loop JCN ( If loop counter is not zero, jump back to &loop )

JMP2r  ( Return to the main program )

@tokeniseFunktal
    .state LDZ .nextState STZ
    ;updateState JSR2
    .state LDZ Comment NEQ
    ;tokeniseFunktal_not_Comment JCN2

JMP2r


@tokeniseFunktal_not_Comment
    ;updateContext JSR2
    .context LDZ None EQU
    ;context_None1 JCN2
    .context LDZ Main EQU 
    .hasMain LDZ #00 EQU 
    AND
    ;context_Main JCN2
    .context LDZ Types NEQ 
    .state LDZ AltSeparator EQU
    ;context_Operator JCN2

    

JMP2r

@funktalMainStart $2
@context_None1
    #00 .inBlock STZ
    ;context_End JMP2
@context_Main
    #01 .hasMain STZ
    ;funktalTokensIdx LDZ2 ;funktalMainStart STA2
    ;context_End JMP2

@context_Operator
    Operator .state STZ
    ;context_End JMP2

@context_End
    .state LDZ Identifier EQU
    ;tokeniseFunktal_Identifier JCN2
    .state LDZ TypeIdentifier EQU
    ;tokeniseFunktal_TypeIdentifier JCN2
    .state LDZ NumConst EQU
    ;tokeniseFunktal_NumConst JCN2
    .state LDZ StringConst EQU
    ;tokeniseFunktal_StringConst JCN2
    .state LDZ EndStringConst EQU
    ;tokeniseFunktal_EndStringConst JCN2
    ;isSeparator JSR2
    .res LDZ #01 EQU
    .prevState LDZ Minus EQU AND   ( isSeparator(state) .and. prevState == Minus )
    ;prevState_Minus JCN2
    .state LDZ Operator EQU
    .state LDZ LeftPointy EQU ORA
    ;tokeniseFunktal_Operator_or_LeftPointy JCN2
    .prevState LDZ Operator EQU .prevState LDZ LeftPointy EQU ORA
    .prevState LDZ Assignment EQU .prevState LDZ Minus EQU ORA
    ORA
    .state LDZ Operator2 EQU
    AND
    ;tokeniseFunktal_Operator2_and_prevState JCN2

@tokeniseFunktal_Identifier ( if (state == Identifier) )
    .prevState LDZ Identifier NEQ
    ,&prevState_not_Identifier JCN
    ,&prevState_Identifier JMP

    &prevState_not_Identifier  ( if (prevState /= Identifier) )
        ;funktalIdentifier_achar0 JSR2 ( funktalIdentifier=achar(0) )
    
        .prevState LDZ NumConst NEQ
        ,&prevState_not_NumConst JCN
        
        .prevc LDZ #00 EQU .c LDZ LIT "x EQU ( prevc=='0' .and. c =='x' )
        AND
        ,&prevc0_cx JCN

    &prevState_Identifier
        .c LDZ .charIdx LDZ .funktalIdentifier ADD STZ ( funktalIdentifier(charIdx) = c )
        .charIdx LDZ INC .charIdx STZ
        ;state_end JMP2

    &prevState_not_NumConst  ( if (prevState /= NumConst) )
        .c LDZ .funktalIdentifier STZ
        #02 .charIdx STZ
        ;state_end JMP2

    &prevc0_cx   ( else if(prevc=='0' .and. c =='x') )
        .prevc LDZ .funktalIdentifier STZ
        .c LDZ .funktalIdentifier #01 ADD STZ
        #03 .charIdx STZ
        ;state_end JMP2



@tokeniseFunktal_TypeIdentifier         ( if (state == TypeIdentifier) )
    .prevState LDZ TypeIdentifier NEQ
    ,&prevState_not_TypeIdentifier JCN
    ,&prevState_TypeIdentifier JMP

    &prevState_not_TypeIdentifier
        ;funktalIdentifier_achar0 JSR2        ( funktalIdentifier=achar(0) )
        .c LDZ .funktalIdentifier STZ
        #02 .charIdx STZ
        ;state_end JMP2

    &prevState_TypeIdentifier
        .c LDZ .charIdx LDZ .funktalIdentifier ADD STZ      ( funktalIdentifier(charIdx) = c )
        .charIdx LDZ INC .charIdx STZ
        ;state_end JMP2

@tokeniseFunktal_NumConst          ( if (state == NumConst) )
    .prevState LDZ NumConst NEQ
    ,&prevState_not_NumConst JCN
    ,&prevState_NumConst JMP

    &prevState_not_NumConst
        ;numConstant_achar0 JSR2   ( numConstant = achar(0) )
        .state LDZ Minus EQU
        ,&prevState_Minus JCN
        ,&prevState_not_Minus JMP
    

    &prevState_NumConst
        .c LDZ .constId LDZ ;numConstant ADD STA
        .constId LDZ INC .constId STZ
        ;state_end JMP2
    
    &prevState_Minus
        LIT "- ;numConstant STA
        .c LDZ #01 ;numConstant ADD STA
        #03 .constId STZ
        ;state_end JMP2
    
    &prevState_not_Minus
        .c LDZ ;numConstant STA
        #02 .constId STZ
        ;state_end JMP2
    

@tokeniseFunktal_StringConst          ( if (state == StringConst) )
    .prevState LDZ StringConst NEQ
    ,&prevState_not_StringConst JCN
    ,&prevState_StringConst JMP

    &prevState_not_StringConst
        ;stringConstant_achar0 JSR2   ( stringConstant = achar(0) )
        #01 .constId STZ
        ;state_end JMP2
    

    &prevState_StringConst
        .c LDZ .constId LDZ ;stringConstant ADD STA
        .constId LDZ INC .constId STZ
        ;state_end JMP2
    

@funktalTokens $800
@tokeniseFunktal_EndStringConst          ( if (state == EndStringConst) )
    ( call addStringConstIfNew(stringConstant,constId,funktalStringConstsIdx,funktalStringConstId, idId) )
    ;addStringConstIfNew JSR2  ( not completed )
    CString #40 SFT ( ishft(CString,4) )
    ConstantLabel ADD .taggedConstId STZ2
    .taggedConstId LDZ2 .label STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken STZ2
    .funktalToken LDZ2 .funktalTokensIdx LDZ2 ;funktalTokens ADD2 STA2
    .funktalTokensIdx LDZ2 INC2 .funktalTokensIdx STZ2
    ;state_end JMP2
JMP2r

@token $2
@makeFunktalToken
    .label LDZ2 #a0 SFT2
    .idId LDZ2 #03ff AND2
    ADD2 ;token STA2
JMP2r
@prevState_Minus
    .prevc LDZ .c STZ
    ;encodeOperatorToken JSR2
    .funktalToken LDZ2 ;funktalTokens .funktalTokensIdx LDZ2 ADD2 LDA2 ( funktalTokens(funktalTokensIdx)=funktalToken )
    .funktalTokensIdx LDZ2 INC2 .funktalTokensIdx STZ2
    ;state_end JMP2

@encodeOperatorToken
    .c LDZ LIT "+ EQU
    ;OperatorLabel_1 JCN2
    .c LDZ LIT "- EQU
    ;OperatorLabel_2 JCN2
    .c LDZ LIT "* EQU
    ;OperatorLabel_3 JCN2
    .c LDZ LIT "/ EQU
    ;OperatorLabel_4 JCN2
    .c LDZ LIT "> EQU
    ;OperatorLabel_5 JCN2
    .c LDZ LIT "< EQU
    ;OperatorLabel_6 JCN2
    .c LDZ LIT "& EQU
    ;OperatorLabel_7 JCN2
    .c LDZ LIT "| EQU
    ;OperatorLabel_8 JCN2
    .c LDZ LIT "^ EQU
    ;OperatorLabel_9 JCN2
    .c LDZ LIT "! EQU
    ;OperatorLabel_16 JCN2

JMP2r   

@OperatorLabel_1
    OperatorLabel .label STZ2 #0001 .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r
@OperatorLabel_2
    OperatorLabel .label STZ2 #0002 .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r
@OperatorLabel_3
    OperatorLabel .label STZ2 #0003 .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r
@OperatorLabel_4
    OperatorLabel .label STZ2 #0004 .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r
@OperatorLabel_5
    OperatorLabel .label STZ2 #0005 .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r
@OperatorLabel_6
    OperatorLabel .label STZ2 #0006 .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r
@OperatorLabel_7
    OperatorLabel .label STZ2 #0007 .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r
@OperatorLabel_8
    OperatorLabel .label STZ2 #0008 .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r
@OperatorLabel_9
    OperatorLabel .label STZ2 #0009 .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r
@OperatorLabel_16
    OperatorLabel .label STZ2 #0010 .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r

@tokeniseFunktal_Operator_or_LeftPointy
    ;encodeOperatorToken JSR2
    .funktalToken LDZ2 ;funktalTokens .funktalTokensIdx LDZ2 ADD2 LDA2 ( funktalTokens(funktalTokensIdx)=funktalToken )
    .funktalTokensIdx LDZ2 INC2 .funktalTokensIdx STZ2
    ;state_end JMP2


@tokeniseFunktal_Operator2_and_prevState
    LIT "  .prevc LDZ EQU
    ,&prevc_space JCN
    LIT "  .c LDZ EQU
    ,&c_space JCN
    ,&Operator2_and_prevState_else JMP


    &prevc_space
        .prevc LDZ .c STZ
        ;encodeOperatorToken JSR2
        ;Operator2_and_prevState_end JMP2

    &c_space
        ;encodeOperatorToken JSR2
        .funktalTokensIdx LDZ2 INC2 .funktalTokensIdx STZ2
        ;Operator2_and_prevState_end JMP2

    &Operator2_and_prevState_else
        ;encodeOperator2Token JSR2
        ;Operator2_and_prevState_end JMP2

@Operator2_and_prevState_end
    .funktalToken LDZ2 ;funktalTokens .funktalTokensIdx LDZ2 #0001 SUB2 ADD2 LDA2
    ;state_end JMP2

@encodeOperator2Token
    .prevc LDZ LIT "= EQU .c LDZ LIT "= EQU AND
    ;OperatorLabel_10 JCN2
    .prevc LDZ LIT "/ EQU .c LDZ LIT "= EQU AND
    ;OperatorLabel_11 JCN2
    .prevc LDZ LIT "> EQU .c LDZ LIT "= EQU AND
    ;OperatorLabel_12 JCN2
    .prevc LDZ LIT "< EQU .c LDZ LIT "= EQU AND
    ;OperatorLabel_13 JCN2
    .prevc LDZ LIT "< EQU .c LDZ LIT "< EQU AND
    ;OperatorLabel_15 JCN2
    .prevc LDZ LIT "> EQU .c LDZ LIT "> EQU AND
    ;OperatorLabel_14 JCN2
    .prevc LDZ LIT "! EQU .c LDZ LIT "! EQU AND
    ;OperatorLabel_17 JCN2
    .prevc LDZ LIT "= EQU .c LDZ LIT "= EQU AND

JMP2r
@OperatorLabel_10
    OperatorLabel .label STZ2 #000a .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r

@OperatorLabel_11
    OperatorLabel .label STZ2 #000b .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r

@OperatorLabel_12
    OperatorLabel .label STZ2 #000c .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r

@OperatorLabel_13
    OperatorLabel .label STZ2 #000d .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r

@OperatorLabel_14
    OperatorLabel .label STZ2 #000e .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r

@OperatorLabel_15
    OperatorLabel .label STZ2 #000f .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r

@OperatorLabel_17
    OperatorLabel .label STZ2 #0011 .idId STZ2
    ;makeFunktalToken JSR2
    ;token LDA2 .funktalToken LDZ2
JMP2r
@state_end



@identifierType $1 @tidentifierStringIdx $2 @tidentifierStringId 2
@idIdx $1 @j $1 @k $1 @cc $1 @ccc $1 @newStringConst $1 

@addIdentifierIfNew 
    #01 ;j STA 
    #01 ;k STA
    ;addIdentifierIfNew_loopj JSR2
    #01 newStringConst STA

@addIdentifierIfNew_loopj
    #00 newStringConst STA
    ;identifierType LDA #01 EQU
    ;identifierType_1j JCN2
    ;addIdentifierIfNew_loopk JSR2
    ;j LDA .idId STZ
    ;addIdentifierIfNew_222 JSR2

    
JMP2r


@identifierType_1j
    ;funktalTypeIdentifierStringIdxs ;j LDA ADD LDA 
    ;idIdx STA
    ;funktalTypeIdentifierStringLengths ;j LDA ADD LDA
    .charIdx LDZ #01 SUB NEQ
    ;addIdentifierIfNew_111 JCN2
    ;funktalIdentifierStringIdxs ;j LDA ADD LDA
    ;idIdx STA
    ;funktalIdentifierStringLengths ;j LDA ADD LDA
    .charIdx LDZ #01 SUB NEQ
    ;addIdentifierIfNew_111 JCN2



@addIdentifierIfNew_loopk
    ;identifierType LDA #01 EQU
    ;identifierType_1k JCN2
    ;identifierType_1k_else JSR2
    ;addIdentifierIfNew_loopk_endif JSR2
    ;k LDA INC DUP ;k STA
    .charIdx LDZ #01 SUB NEQ
    ;addIdentifierIfNew_loopk JCN2

@addIdentifierIfNew_loopk_endif
    .funktalIdentifier ;k LDA ADD LDZ ;ccc LDA
    ;cc LDA ;ccc LDA NEQ
    ;addIdentifierIfNew_111 JCN2
JMP2r

@identifierType_1k
    ;idIdx LDA ;k LDA ADD #01 SUB ( idIdx+k-1 )
    ;funktalTypeIdentifierStrings ADD LDA .cc STA  ( cc =  funktalTypeIdentifierStrings(idIdx+k-1) )


@identifierType_1k_else
    ;idIdx LDA ;k LDA ADD #01 SUB ( idIdx+k-1 )
    ;funktalIdentifierStrings ADD LDA .cc STA

@addIdentifierIfNew_111
    ;j LDA INC DUP ;j STA
    ;tidentifierStringId LDA NEQ
    ;addIdentifierIfNew_loopj JCN2
    ;addIdentifierIfNew_loopj JSR2

@addIdentifierIfNew_222
    ;newIdentifier LDA
    ;newIdentifier_true JCN2
JMP2r

@newIdentifier_true 
    ;tidentifierStringId LDA .idId STZ
    ;identifierType_if JSR2
    #01 ;k STA
    ;addIdentifierIfNew_222_loopk JSR2
    ;tidentifierStringId LDA INC ;tidentifierStringId STA

    ;identifierType_222_end_judge JSR2
    ;tidentifierStringId LDA INC ;tidentifierStringId STA
    .charIdx LDZ #01 SUB
    ;tidentifierStringIdx LDA ADD ;tidentifierStringIdx STA

JMP2r
@identifierType_if
    ;identifierType LDA #01 EQU
    ;identifierType_222_1 JCN2
    ;identifierType_222_not_1 JSR2
JMP2r
@identifierType_222_1
    ;tidentifierStringIdx LDA ;funktalTypeIdentifierStringIdxs .idId LDZ ADD LDA
JMP2r

@identifierType_222_not_1
    ;tidentifierStringIdx LDA ;funktalIdentifierStringIdxs .idId LDZ ADD LDA
JMP2r

@addIdentifierIfNew_222_loopk
    ;identifierType LDA #01 EQU
    ;identifierType_222_1k JCN2
    ;identifierType_222_not_1k JSR2
JMP2r
@identifierType_222_1k
    .funktalIdentifier ;k LDA ADD LDZ
    ;funktalTypeIdentifierStrings ;tidentifierStringIdx LDA ;k LDA ADD #01 SUB ADD2 LDA
JMP2r

@identifierType_222_not_1k
    .funktalIdentifier ;k LDA ADD LDZ
    ;funktalIdentifierStrings ;tidentifierStringIdx LDA ;k LDA ADD #01 SUB ADD2 LDA
JMP2r
@identifierType_222_end_judge
    ;identifierType LDA #01 EQU
    ;identifierType_222_end_judge_1 JCN2
    ;identifierType_222_end_judge_not_1 JSR2
JMP2r
@identifierType_222_end_judge_1
    .charIdx LDZ #01 SUB
    ;funktalTypeIdentifierStringLengths .idId LDA ADD STA
JMP2r
@identifierType_222_end_judge_not_1
    .charIdx LDZ #01 SUB
    ;funktalIdentifierStringLengths .idId LDA ADD STA
JMP2r


@addStringConstIfNew

JMP2r
@updateContext
    .context LDZ None EQU
    ,&context_None JCN
    ;
JMP2r  

    &context_None
        .state LDZ BlockOpen EQU
        ,&state_BlockOpen JCN

        .state LDZ BlockClose EQU
        ,&state_BlockClose JCN
    JMP2r

    &state_BlockOpen
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "l EQU
        ,&Libraries JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "u EQU
        ,&Uxntal JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "t EQU
        ,&Types JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "a EQU
        ,&Aliases JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "c EQU
        ,&Constants JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "s EQU
        ,&ProgramState JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "d EQU
        ,&Devices JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "f EQU
        ,&Functions JCN
        .funktalIdentifier #00 LDZ ADD LDZ
        LIT "m EQU
        ,&Main JCN

        .context LDZ .prevContext STZ
        ;funktalIdentifier_achar0 JSR2 ( funktalIdentifier=achar(0) )
    JMP2r
    
    &state_BlockClose
        None .context STZ
        ;case_end JMP2
    &Libraries
        Libraries .context STZ
        ;case_end JMP2

    &Uxntal
        Uxntal .context STZ
        ;case_end JMP2
    
    &Types
        Types .context STZ
        ;case_end JMP2

    &Aliases
        Aliases .context STZ
        ;case_end JMP2

    &Constants
        Constants .context STZ
        ;case_end JMP2

    &ProgramState
        ProgramState .context STZ
        ;case_end JMP2

    &Devices
        Devices .context STZ
        ;case_end JMP2

    &Functions
        Functions .context STZ
        ;case_end JMP2

    &Main
        Main .context STZ
        ;case_end JMP2
    
@case_end
    .context LDZ .prevContext STZ
    ;funktalIdentifier_achar0 JSR2 ( funktalIdentifier=achar(0) )
JMP2r
@updateState
    .c STZ ( take char from the stack and put it in c )
    .state LDZ StringConst EQU 
    .c LDZ #22 EQU ( " has an ASCII code value of 34 )
    AND
    ,&EndString JCN

    .state LDZ StringConst EQU
    .c LDZ #22 NEQ
    AND
    ,&String JCN
    

    .c STZ ( take char from the stack and put it in c )
    .state LDZ CharConst EQU 
    .c LDZ #27 EQU ( " has an ASCII code value of 34 )
    AND
    ,&EndChar JCN

    .state LDZ CharConst EQU
    .c LDZ #27 NEQ
    AND
    ,&Char JCN
    

    .state LDZ Comment EQU
    .c LDZ #0a EQU
    AND
    ,&Base JCN
    

    .state LDZ StringConst NEQ
    .state LDZ CharConst NEQ
    AND
    .state LDZ Comment NEQ
    AND
    ,&second_jump JCN ( state /= StringConst .and. state /= CharConst .and. state /= Comment )

    ,&nextState_state JMP ( else nextState = state )
    JMP2r

    &nextState_state
        .state LDZ .nextState STZ
    JMP2r

    &EndString
        EndStringConst .nextState STZ
    JMP2r

    &String
        StringConst .nextState STZ
    JMP2r

    &EndChar
        EndCharConst .nextState STZ
    JMP2r

    &Char
        CharConst .nextState STZ
    JMP2r

    &Base
        Base .nextState STZ
    JMP2r

    &second_jump
        .c LDZ #22 EQU ( " has an ASCII code value of 34 )
        ,&String JCN
        
        .c LDZ #27 EQU
        ,&Char JCN
        

        .state LDZ Minus EQU
        .c LDZ LIT "- EQU
        AND
        ;Comment JCN2
        

        .state LDZ Comment EQU
        .c LDZ #0a EQU
        AND
        ,&Base JCN
        

        .c LDZ LIT "{ EQU 
        ;BlockOpen JCN2
        
        .c LDZ LIT "} EQU 
        ;BlockClose JCN2
        

        .c LDZ LIT "( EQU 
        ;ParenOpen JCN2
        
        .c LDZ LIT ") EQU 
        ;ParenClose JCN2

        .c LDZ LIT "[ EQU 
        ;BracketOpen JCN2
        .c LDZ LIT "] EQU 
        ;BracketClose JCN2
        
        .c LDZ LIT "\ EQU 
        ;BindOpen JCN2
        
        .c LDZ LIT "= EQU 
        ;Operator2_Assignment JCN2
        

        .c LDZ LIT "` EQU 
        ;Quote JCN2

        
        ;isIdentifierState JSR2
        ;isEndConstState JSR2
        ORA
        .state LDZ BlockOpen EQU
        .state LDZ BracketOpen EQU
        ORA
        .state LDZ ParenOpen EQU
        ORA ORA
        .c LDZ LIT "  EQU
        .c LDZ #09 EQU
        ORA
        AND
        ;Separator JCN2
        
        .c LDZ LIT ", EQU 
        ;Comma JCN2
        

        .c LDZ LIT ": EQU 
        ;TypeDeclarator JCN2
        

        .c LDZ LIT "| EQU 
        ;AltSeparator JCN2
        

        .state LDZ NumConst NEQ
        .c LDZ LIT ". EQU
        AND
        ;BindClose JCN2
        

        .state LDZ NumConst EQU
        .c LDZ LIT "_ EQU
        AND
        ;NumConst JCN2
        

        ;isIdentifierState JSR2
        EOR
        ;isIdentifierStartChar JSR2
        AND
        ;Identifier JCN2
        

        ;isIdentifierState JSR2
        EOR
        ;isTypeIdentifierStartChar JSR2
        AND
        ;TypeIdentifier JCN2
        

        ;isIdentifierState JSR2
        EOR
        ;isStringConstState JSR2
        ORA
        ;TypeIdentifier JCN2
        

        ;isIdentifierState JSR2
        ;isStringConstState JSR2
        ORA EOR
        ;isDigit JSR2
        AND
        ;NumConst JCN2
        

        .state LDZ LeftPointy EQU
        .c LDZ LIT "- EQU
        AND
        ;TypeSeparator JCN2
        

        .state LDZ Minus NEQ
        .c LDZ LIT "- EQU
        AND
        ;Minus JCN2
        

        .c LDZ LIT "  EQU
        .c LDZ #09 EQU
        ORA
        .state LDZ Minus EQU
        AND
        ;Operator2 JCN2
        

        .state LDZ Operator NEQ
        .state LDZ Operator2 NEQ
        AND
        .state LDZ LeftPointy NEQ
        .c LDZ LIT "< EQU
        AND AND
        ;LeftPointy JCN2
        

        .state LDZ Operator NEQ
        .state LDZ Operator2 NEQ
        AND
        .state LDZ LeftPointy NEQ
        ;isOperator JSR2
        AND AND
        ;Operator JCN2
        

        .state LDZ Operator EQU
        .state LDZ LeftPointy EQU
        ORA
        .state LDZ Assignment EQU
        ORA
        ;isOperator JSR2
        AND
        ;TypeSeparator_Operator2 JCN2
        


        .state LDZ Operator2 EQU
        ;updateState/Base JCN2
        

        .state LDZ Operator EQU
        .state LDZ LeftPointy EQU
        ORA
        ;isOperator JSR2
        EOR AND
        ;updateState/Base JCN2
        

        .state LDZ ExprSeparator NEQ
        ;isExprSeparator JSR2
        AND
        ;ExprSeparator JCN2
        

        .c LDZ LIT "  EQU
        .c LDZ #09 EQU
        ORA
        ;isExprSeparator JSR2
        ORA
        .state LDZ ExprSeparator EQU
        AND
        ;Separator JCN2
        ;updateState/nextState_state JMP2 ( else nextState = state )
        
JMP2r

@Comment
    Comment .nextState STZ
JMP2r

@BlockOpen
    BlockOpen .nextState STZ
JMP2r

@BlockClose
    BlockClose .nextState STZ
JMP2r

@ParenOpen
    ParenOpen .nextState STZ
JMP2r

@ParenClose
    ParenClose .nextState STZ
JMP2r

@BracketOpen
    BracketOpen .nextState STZ
JMP2r

@BracketClose
    BracketClose .nextState STZ
JMP2r

@BindOpen
    BindOpen .nextState STZ
JMP2r

@Operator2_Assignment
    .state LDZ Operator EQU
    .state LDZ LeftPointy EQU
    ORA
    .state LDZ Assignment EQU
    ORA
    ;Operator2 JCN2
    ;Assignment JMP2
JMP2r

@TypeSeparator_Operator2
    .state LDZ LeftPointy EQU
    .c LDZ LIT "- EQU
    AND
    ;TypeSeparator JCN2
    ;Operator2 JMP2
JMP2r

@isIdentifierState
    .state LDZ Identifier EQU
    .state LDZ TypeIdentifier EQU
    ORA
    .state LDZ NumConst EQU
    .state LDZ Operator EQU
    ORA ORA
    .state LDZ Operator2 EQU
    ORA
JMP2r

@isEndConstState
    .state LDZ EndCharConst EQU
    .state LDZ EndStringConst EQU
    ORA
    .state LDZ NumConst EQU
    ORA
JMP2r

@isStringConstState
    .state LDZ CharConst EQU
    .state LDZ CharConst EQU
    ORA
    
JMP2r


@Operator2
    Operator2 .nextState STZ
JMP2r

@Assignment
    Assignment .nextState STZ
JMP2r

@Quote
    Quote .nextState STZ
JMP2r

@Comma
    Comma .nextState STZ
JMP2r

@Separator
    Separator .nextState STZ
JMP2r

@TypeDeclarator
    TypeDeclarator .nextState STZ
JMP2r

@AltSeparator
    AltSeparator .nextState STZ
JMP2r

@BindClose
    BindClose .nextState STZ
JMP2r

@NumConst
    NumConst .nextState STZ
JMP2r

@Identifier
    Identifier .nextState STZ
JMP2r

@Minus
    Minus .nextState STZ
JMP2r

@LeftPointy
    LeftPointy .nextState STZ
JMP2r

@Operator
    Operator .nextState STZ
JMP2r

@TypeSeparator
    TypeSeparator .nextState STZ
JMP2r

@ExprSeparator
    ExprSeparator .nextState STZ
JMP2r

@TypeIdentifier
    TypeIdentifier .nextState STZ
JMP2r





    



    




